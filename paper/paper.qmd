---
title: "Finding the True MVP"
subtitle: "An NBA Analysis Through Linear Regression"
author: 
  - Yan B. Mezhiborsky
thanks: "Code and data are available at: [https://github.com/RohanAlexander/starter_folder](https://github.com/RohanAlexander/starter_folder)."
date: today
date-format: long
abstract: "First sentence. Second sentence. Third sentence. Fourth sentence."
format: pdf
number-sections: true
bibliography: references.bib
toc: true
---

```{r}
#| include: false
#| warning: false
#| message: false
#| echo: false

library(tidyverse)
library(rstanarm)
library(dplyr)
library(janitor)
library(lubridate)
library(modelsummary)
library(knitr)
library(StanHeaders)
library(kableExtra)

```

# Introduction {#sec-intro}

Overview paragraph

Estimand paragraph

Results paragraph

Why it matters paragraph

Telegraphing paragraph: The remainder of this paper is structured as follows. @sec-data....

# Data {#sec-data}

## Overview

We use the statistical programming language R [@citeR], as well as the following packages to help clean and manipulate our data, [@tidyverse], [@rstanarm], [@dplyr], [@janitor], [@lubridate], [@modelsummary], [@knitr], [@StanHeaders], [@kableExtra]. Using these packages we cleaned our data, added years for the data sets that only had seasons, referring to the basketball season, as well as helped create some nice tables, unlike the traditional R software can create.

Our data was collected from [@bbref], we collected data from every player that received a vote for any All-NBA teams since 1986, this includes a vote cast for the First All-NBA Team, the Second All-NBA Team, and the Third All-NBA Team. As we believed that taking the players that received votes for the MVP awards would result in a smaller sample. We also created a new statistic call `MVP_Index` that will be defined in @sec-variables. In addition, we collected a data set for all NBA MVPs since 1986, so we could compare to the ones we have chosen with the `MVP_Index`.

Following @tellingstories, we use techniques and methods from this text we have analyzed the data using models, graphs, tables and other methods of data analysis to conduct our research to find  players that could have been MVPs and what the MVP for the following years will look like(statistically). 


## Variables {#sec-variables}

### All NBA Variables

As we collected data from each year since 1986 individually, we have utilized the following variables:

-   `Team:` Whether the player was in the 1st, 2nd, or 3rd All NBA Teams or OVR if they did not make the top three teams but still received a vote.
-   `Pos:` The player's position including the generalized positions G, F, C, for Guard, Forward, and Center respectively.
-   `Player:` The name of the NBA player.
-   `Age:` The age of the NBA player.
-   `Tm:` The three letter designation for the NBA team the player played for the year.
-   `G:` Games played by the player.
-   `MP:` Minutes played per game.
-   `PTS:` Points per game.
-   `TRB:` Total Rebounds per game, including offensive and defensive rebounds.
-   `BLK:` Blocks per game
-   `STL:` Steals Per game
-   `WS:` The amount of wins allocated to the individual player

As each year has an individual data set we took PTS, TRB, AST, BLK, STL,a nd WS took the average for that year and normalized each player's statistics by dividing them by the average of that year with this we have created the MVP Index which we have defined as:

\$\$

MVP\_{Index} = 0.8PTS\_{Norm} + 0.25AST\_{Norm} + 0.25TRB\_{Norm} + 0.1STL\_{Norm} + 0.1BLK\_{Norm} + 0.15WS\_{Norm}

\$\$

With this `MVP Index` we have created our own list of who could have been MVP base on statistics for that year, essentially comparing how good the player was to othe rplayers in the basketball season.

### Historical MVP Variable

For our second set of date we have all MVPs since 1986 also sourced from [@bbref], and the variables that have been used are the following:

-   `Player:` The name of the NBA player.
-   `Year:` The year in which the player was selected as MVP.
-   `Tm:` The three letter designation for the NBA team the player played for the year.
-   `G:` Games played by the player.
-   `MP:` Minutes played per game.
-   `PTS:` Points per game.
-   `TRB:` Total Rebounds per game, including offensive and defensive rebounds.
-   `BLK:` Blocks per game
-   `STL:` Steals Per game
-   `WS:` The amount of wins allocated to the individual player

## Measurement

Data collected in sports and more specifically basketball is rather simple. When an NBA game is being played there are people who's entire job is to keep track of a players statistics throughout the game, whenever a player makes a shot, or steals they ball it is being logged by that specific person. After the standard 82 games, there could be morte or less under different circumstances such ast COVID-19, injuries, or even trades all regular season statistics have been collected. As most of our in game statistics are based on the players 'per game' average, the total number of points blocks, etc., are recorded it is divided by the number of games the player played that season.

## Outcome variable: MVP Index

Our outcome variable is the same as our estimand in @sec-intro. As `MVP Index` is dependent on our other statistics, Points, Assists, Rebounds, Steals, Blocks, and Win Shares. As we are studying MVPs in our paper this is our Variable of interest ast it represents how good a player was in comparison to the other best players in the NBA that year, from the sample of players that have received any ALL NBA Team vote. 



```{r}
#| include: false
#| warning: false
#| message: false
#| echo: false


# 1986
NBA1986 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1986.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1986[2, ]))
NBA1986 <- NBA1986[-c(1, 2), ]
colnames(NBA1986) <- new_col_names
NBA1986[] <- lapply(NBA1986, type.convert, as.is = TRUE)

# 1987
NBA1987 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1987.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1987[2, ]))
NBA1987 <- NBA1987[-c(1, 2), ]
colnames(NBA1987) <- new_col_names
NBA1987[] <- lapply(NBA1987, type.convert, as.is = TRUE)

# 1988
NBA1988 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1988.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1988[2, ]))
NBA1988 <- NBA1988[-c(1, 2), ]
colnames(NBA1988) <- new_col_names
NBA1988[] <- lapply(NBA1988, type.convert, as.is = TRUE)

# 1989
NBA1989 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1989.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1989[2, ]))
NBA1989 <- NBA1989[-c(1, 2), ]
colnames(NBA1989) <- new_col_names
NBA1989[] <- lapply(NBA1989, type.convert, as.is = TRUE)

# 1990
NBA1990 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1990.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1990[2, ]))
NBA1990 <- NBA1990[-c(1, 2), ]
colnames(NBA1990) <- new_col_names
NBA1990[] <- lapply(NBA1990, type.convert, as.is = TRUE)

# 1991
NBA1991 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1991.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1991[2, ]))
NBA1991 <- NBA1991[-c(1, 2), ]
colnames(NBA1991) <- new_col_names
NBA1991[] <- lapply(NBA1991, type.convert, as.is = TRUE)

# 1992
NBA1992 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1992.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1992[2, ]))
NBA1992 <- NBA1992[-c(1, 2), ]
colnames(NBA1992) <- new_col_names
NBA1992[] <- lapply(NBA1992, type.convert, as.is = TRUE)

# 1993
NBA1993 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1993.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1993[2, ]))
NBA1993 <- NBA1993[-c(1, 2), ]
colnames(NBA1993) <- new_col_names
NBA1993[] <- lapply(NBA1993, type.convert, as.is = TRUE)

# 1994
NBA1994 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1994.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1994[2, ]))
NBA1994 <- NBA1994[-c(1, 2), ]
colnames(NBA1994) <- new_col_names
NBA1994[] <- lapply(NBA1994, type.convert, as.is = TRUE)

# 1995
NBA1995 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1995.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1995[2, ]))
NBA1995 <- NBA1995[-c(1, 2), ]
colnames(NBA1995) <- new_col_names
NBA1995[] <- lapply(NBA1995, type.convert, as.is = TRUE)

# 1996
NBA1996 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1996.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1996[2, ]))
NBA1996 <- NBA1996[-c(1, 2), ]
colnames(NBA1996) <- new_col_names
NBA1996[] <- lapply(NBA1996, type.convert, as.is = TRUE)

# 1997
NBA1997 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1997.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1997[2, ]))
NBA1997 <- NBA1997[-c(1, 2), ]
colnames(NBA1997) <- new_col_names
NBA1997[] <- lapply(NBA1997, type.convert, as.is = TRUE)

# 1998
NBA1998 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1998.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1998[2, ]))
NBA1998 <- NBA1998[-c(1, 2), ]
colnames(NBA1998) <- new_col_names
NBA1998[] <- lapply(NBA1998, type.convert, as.is = TRUE)

# 1999
NBA1999 <- read.csv("../data/01-raw_data/All NBA/AllNBA_1999.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA1999[2, ]))
NBA1999 <- NBA1999[-c(1, 2), ]
colnames(NBA1999) <- new_col_names
NBA1999[] <- lapply(NBA1999, type.convert, as.is = TRUE)

# 2000
NBA2000 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2000.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2000[2, ]))
NBA2000 <- NBA2000[-c(1, 2), ]
colnames(NBA2000) <- new_col_names
NBA2000[] <- lapply(NBA2000, type.convert, as.is = TRUE)

# 2001
NBA2001 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2001.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2001[2, ]))
NBA2001 <- NBA2001[-c(1, 2), ]
colnames(NBA2001) <- new_col_names
NBA2001[] <- lapply(NBA2001, type.convert, as.is = TRUE)

# 2002
NBA2002 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2002.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2002[2, ]))
NBA2002 <- NBA2002[-c(1, 2), ]
colnames(NBA2002) <- new_col_names
NBA2002[] <- lapply(NBA2002, type.convert, as.is = TRUE)

# 2003
NBA2003 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2003.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2003[2, ]))
NBA2003 <- NBA2003[-c(1, 2), ]
colnames(NBA2003) <- new_col_names
NBA2003[] <- lapply(NBA2003, type.convert, as.is = TRUE)

# 2004
NBA2004 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2004.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2004[2, ]))
NBA2004 <- NBA2004[-c(1, 2), ]
colnames(NBA2004) <- new_col_names
NBA2004[] <- lapply(NBA2004, type.convert, as.is = TRUE)

# 2005
NBA2005 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2005.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2005[2, ]))
NBA2005 <- NBA2005[-c(1, 2), ]
colnames(NBA2005) <- new_col_names
NBA2005[] <- lapply(NBA2005, type.convert, as.is = TRUE)

# 2006
NBA2006 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2006.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2006[2, ]))
NBA2006 <- NBA2006[-c(1, 2), ]
colnames(NBA2006) <- new_col_names
NBA2006[] <- lapply(NBA2006, type.convert, as.is = TRUE)

# 2007
NBA2007 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2007.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2007[2, ]))
NBA2007 <- NBA2007[-c(1, 2), ]
colnames(NBA2007) <- new_col_names
NBA2007[] <- lapply(NBA2007, type.convert, as.is = TRUE)

# 2008
NBA2008 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2008.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2008[2, ]))
NBA2008 <- NBA2008[-c(1, 2), ]
colnames(NBA2008) <- new_col_names
NBA2008[] <- lapply(NBA2008, type.convert, as.is = TRUE)

# 2009
NBA2009 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2009.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2009[2, ]))
NBA2009 <- NBA2009[-c(1, 2), ]
colnames(NBA2009) <- new_col_names
NBA2009[] <- lapply(NBA2009, type.convert, as.is = TRUE)

# 2010
NBA2010 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2010.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2010[2, ]))
NBA2010 <- NBA2010[-c(1, 2), ]
colnames(NBA2010) <- new_col_names
NBA2010[] <- lapply(NBA2010, type.convert, as.is = TRUE)

# 2011
NBA2011 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2011.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2011[2, ]))
NBA2011 <- NBA2011[-c(1, 2), ]
colnames(NBA2011) <- new_col_names
NBA2011[] <- lapply(NBA2011, type.convert, as.is = TRUE)

# 2012
NBA2012 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2012.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2012[2, ]))
NBA2012 <- NBA2012[-c(1, 2), ]
colnames(NBA2012) <- new_col_names
NBA2012[] <- lapply(NBA2012, type.convert, as.is = TRUE)

# 2013
NBA2013 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2013.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2013[2, ]))
NBA2013 <- NBA2013[-c(1, 2), ]
colnames(NBA2013) <- new_col_names
NBA2013[] <- lapply(NBA2013, type.convert, as.is = TRUE)

# 2014
NBA2014 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2014.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2014[2, ]))
NBA2014 <- NBA2014[-c(1, 2), ]
colnames(NBA2014) <- new_col_names
NBA2014[] <- lapply(NBA2014, type.convert, as.is = TRUE)

# 2015
NBA2015 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2015.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2015[2, ]))
NBA2015 <- NBA2015[-c(1, 2), ]
colnames(NBA2015) <- new_col_names
NBA2015[] <- lapply(NBA2015, type.convert, as.is = TRUE)

# 2016
NBA2016 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2016.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2016[2, ]))
NBA2016 <- NBA2016[-c(1, 2), ]
colnames(NBA2016) <- new_col_names
NBA2016[] <- lapply(NBA2016, type.convert, as.is = TRUE)

# 2017
NBA2017 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2017.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2017[2, ]))
NBA2017 <- NBA2017[-c(1, 2), ]
colnames(NBA2017) <- new_col_names
NBA2017[] <- lapply(NBA2017, type.convert, as.is = TRUE)

# 2018
NBA2018 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2018.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2018[2, ]))
NBA2018 <- NBA2018[-c(1, 2), ]
colnames(NBA2018) <- new_col_names
NBA2018[] <- lapply(NBA2018, type.convert, as.is = TRUE)

# 2019
NBA2019 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2019.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2019[2, ]))
NBA2019 <- NBA2019[-c(1, 2), ]
colnames(NBA2019) <- new_col_names
NBA2019[] <- lapply(NBA2019, type.convert, as.is = TRUE)

# 2020
NBA2020 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2020.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2020[2, ]))
NBA2020 <- NBA2020[-c(1, 2), ]
colnames(NBA2020) <- new_col_names
NBA2020[] <- lapply(NBA2020, type.convert, as.is = TRUE)

# 2021
NBA2021 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2021.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2021[2, ]))
NBA2021 <- NBA2021[-c(1, 2), ]
colnames(NBA2021) <- new_col_names
NBA2021[] <- lapply(NBA2021, type.convert, as.is = TRUE)

# 2022
NBA2022 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2022.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2022[2, ]))
NBA2022 <- NBA2022[-c(1, 2), ]
colnames(NBA2022) <- new_col_names
NBA2022[] <- lapply(NBA2022, type.convert, as.is = TRUE)

# 2023
NBA2023 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2023.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2023[2, ]))
NBA2023 <- NBA2023[-c(1, 2), ]
colnames(NBA2023) <- new_col_names
NBA2023[] <- lapply(NBA2023, type.convert, as.is = TRUE)

# 2024
NBA2024 <- read.csv("../data/01-raw_data/All NBA/AllNBA_2024.csv", header = FALSE)
new_col_names <- as.character(unlist(NBA2024[2, ]))
NBA2024 <- NBA2024[-c(1, 2), ]
colnames(NBA2024) <- new_col_names
NBA2024[] <- lapply(NBA2024, type.convert, as.is = TRUE)
```

```{r}
#| include: false
#| warning: false
#| message: false
#| echo: false


Real_MVP_Data <- read.csv("../data/01-raw_data/NBA MVPs/Real_MVP_Data.csv")


```

```{r}
#| include: false
#| warning: false
#| message: false
#| echo: false


# Years range
years <- 1986:2024

# Normalize columns and calculate MVP index with WS
for (year in years) {
  dataset_name <- paste0("NBA", year)
  dataset <- get(dataset_name)
  
  if (all(c("PTS", "AST", "TRB", "STL", "BLK", "WS") %in% colnames(dataset))) {
    averages <- colMeans(dataset[c("PTS", "AST", "TRB", "STL", "BLK", "WS")], na.rm = TRUE)
    
    dataset$avg_PTS <- averages["PTS"]
    dataset$avg_AST <- averages["AST"]
    dataset$avg_TRB <- averages["TRB"]
    dataset$avg_STL <- averages["STL"]
    dataset$avg_BLK <- averages["BLK"]
    dataset$avg_WS <- averages["WS"]
    
    dataset$norm_PTS <- dataset$PTS / dataset$avg_PTS
    dataset$norm_AST <- dataset$AST / dataset$avg_AST
    dataset$norm_TRB <- dataset$TRB / dataset$avg_TRB
    dataset$norm_STL <- dataset$STL / dataset$avg_STL
    dataset$norm_BLK <- dataset$BLK / dataset$avg_BLK
    dataset$norm_WS <- dataset$WS / dataset$avg_WS
    
    dataset$MVP_index <- 0.8 * dataset$norm_PTS +
                         0.25 * dataset$norm_AST +
                         0.25 * dataset$norm_TRB +
                         0.1 * dataset$norm_BLK +
                         0.1 * dataset$norm_STL +
                         0.15 * dataset$norm_WS
    
    assign(dataset_name, dataset)
  } else {
    stop(paste0("One or more required columns (PTS, AST, TRB, STL, BLK, WS) are missing in dataset for year ", year))
  }
}

# Create a table of the player with the highest MVP index for each year
mvp_table <- data.frame(Year = integer(), Player = character(), MVP_index = numeric(), 
                        PTS = numeric(), AST = numeric(), TRB = numeric(), 
                        BLK = numeric(), STL = numeric(), WS = numeric(), 
                        stringsAsFactors = FALSE)

# Iterate over each year to find the top player
for (year in years) {
  dataset_name <- paste0("NBA", year)
  dataset <- get(dataset_name)
  
  if ("MVP_index" %in% colnames(dataset)) {
    max_row <- dataset[which.max(dataset$MVP_index), ]
    
    mvp_entry <- data.frame(
      Year = year, 
      Player = max_row$Player, 
      MVP_index = max_row$MVP_index,
      PTS = max_row$PTS,
      AST = max_row$AST,
      TRB = max_row$TRB,
      BLK = max_row$BLK,
      STL = max_row$STL,
      WS = max_row$WS,
      stringsAsFactors = FALSE
    )
    
    mvp_table <- rbind(mvp_table, mvp_entry)
  } else {
    stop(paste0("MVP_index column is missing in dataset for year ", year))
  }
}

nba_list <- list()

for (year in years) {
  dataset_name <- paste0("NBA", year)
  dataset <- get(dataset_name)
  dataset$Year <- year
  nba_list[[as.character(year)]] <- dataset
}

nba_master <- do.call(rbind, nba_list)
write.csv(nba_master, "../data/02-analysis_data/nba_master.csv", row.names = FALSE)


merged_real_mvp <- merge(
  Real_MVP_Data, 
  nba_master[, c("Player", "Age", "MVP_index")],  # Select only relevant columns from nba_master
  by = c("Player", "Age"), 
  all.x = TRUE
)

merged_real_mvp <- merged_real_mvp %>%
  mutate(
    Year = case_when(
      # If entry matches "YYYY-YY", extract the first 4 characters as the year
      grepl("^\\d{4}-\\d{2}$", Season) ~ as.numeric(substr(Season, 1, 4)) + 1,
      
      # If entry matches "Mmm-YY", extract the last 2 characters, convert to 20YY, and add 1
      grepl("^[a-zA-Z]{3}-\\d{2}$", Season) ~ as.numeric(paste0("20", substr(Season, 5, 6))) + 1,
      
      # Default: NA for non-matching formats
      TRUE ~ NA_real_
    )
  )

# Convert Year column to numeric
merged_real_mvp$Year <- as.numeric(merged_real_mvp$Year)


```



# Model

The goal of our modelling strategy is twofold. Firstly, we will be using a linear regression model to predict the MVP Index of the mvp in the following year regardless of the player. This will tell us how much better we can expect the 2025 MVP to be compared to his fellow NBA players. Secondly, We will use another data set we have created by selecting players that had the highest MVP index in their respective year whether they had won MVP or not. So, Using both these predictions we will be able to compare whether we believe the player with the highest MVP index will in fact be the next NBA MVP.

Here we briefly describe the Linear analysis model used to investigate what the MVP Index of the next NBA MVP will be. For our model we will use collected data describe in @sec-data.

Background details and diagnostics are included in [Appendix -@sec-model-details].

## Model set-up

Define $y_i$ as the number of seconds that the plane remained aloft. Then $\beta_i$ is the wing width and $\gamma_i$ is the wing length, both measured in millimeters.

```{=tex}
\begin{align} 
y_i|\mu_i, \sigma &\sim \mbox{Normal}(\mu_i, \sigma) \\
\mu_i &= \pi_i + \alpha_i + \rho_i + \beta_i + \xi_i + \omega_i \\
\mu &\sim \mbox{Normal}(0, 2.5) \\
\pi &\sim \mbox{Normal}(0, 2.5) \\
\alpha &\sim \mbox{Normal}(0, 2.5) \\
\rho &\sim \mbox{Normal}(0, 2.5) \\
\beta &\sim \mbox{Normal}(0, 2.5) \\
\xi &\sim \mbox{Normal}(0, 2.5) \\
\omega &\sim \mbox{Normal}(0, 2.5) \\
\sigma &\sim \mbox{Exponential}(1)
\end{align}
```




```{r}
# create a linear regression model
lm_model <- lm(MVP_index ~ PTS + AST + TRB + BLK + STL + WS, data = nba_master)

# View the summary of the model
summary(lm_model)

next_year_mvp_stats <- mvp_table %>%
  filter(Year == 2024) %>%  # Replace with the target year
  select(PTS, AST, TRB, BLK, STL, WS)

# Predict MVP_index for the next year's MVP
predicted_index_mvp_table <- predict(lm_model, newdata = next_year_mvp_stats)
print(paste("Predicted MVP Index (mvp_table):", predicted_index_mvp_table))

next_year_real_mvp_stats <- merged_real_mvp %>%
  filter(Year == 2024) %>%  # Replace with the target year
  select(PTS, AST, TRB, BLK, STL, WS)

# Predict MVP_index for the next year's MVP
predicted_index_real_mvp <- predict(lm_model, newdata = next_year_real_mvp_stats)


```

### Model justification

We expect a positive relationship between the size of the wings and time spent aloft. In particular...

We can use maths by including latex between dollar signs, for instance $\theta$.

### Model Results

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-modeltable
#| fig-cap: "Historical MVP and Player with highest MVP Index since 2014"

# Filter MVPs from 2014 to 2024 for both datasets
mvp_table_filtered <- mvp_table %>%
  filter(Year >= 2014 & Year <= 2024) %>%
  select(Year, Player, MVP_index)

real_mvp_filtered <- merged_real_mvp %>%
  filter(Year >= 2014 & Year <= 2024) %>%
  select(Year, Player, MVP_index)

# Predict MVP index for 2025 and add it to both tables
next_year_mvp_stats <- mvp_table %>%
  filter(Year == 2024) %>%  # Use 2024 stats as proxy
  select(PTS, AST, TRB, BLK, STL, WS)

predicted_index_mvp_table <- NA
if (nrow(next_year_mvp_stats) > 0) {
  predicted_index_mvp_table <- predict(lm_model, newdata = next_year_mvp_stats)
}

mvp_table_filtered <- bind_rows(
  mvp_table_filtered,
  data.frame(
    Year = 2025,
    Player = "Predicted MVP",
    MVP_index = predicted_index_mvp_table
  )
)

next_year_real_mvp_stats <- merged_real_mvp %>%
  filter(Year == 2024) %>%  # Use 2024 stats as proxy
  select(PTS, AST, TRB, BLK, STL, WS)

predicted_index_real_mvp <- NA
if (nrow(next_year_real_mvp_stats) > 0) {
  predicted_index_real_mvp <- predict(lm_model, newdata = next_year_real_mvp_stats)
}

real_mvp_filtered <- bind_rows(
  real_mvp_filtered,
  data.frame(
    Year = 2025,
    Player = "Predicted MVP",
    MVP_index = predicted_index_real_mvp
  )
)

# Rename columns for clarity
mvp_table_filtered <- mvp_table_filtered %>%
  rename(
    `Simulated Data - Player` = Player,
    `Simulated Data - MVP Index` = MVP_index
  )

real_mvp_filtered <- real_mvp_filtered %>%
  rename(
    `Historical Data - Player` = Player,
    `Historical Data - MVP Index` = MVP_index
  )

# Join the two tables by Year
combined_table <- full_join(
  mvp_table_filtered,
  real_mvp_filtered,
  by = "Year"
)

# Create a styled table using kable
combined_table %>%
  kable(
    format = "latex",
    booktabs = TRUE,
    col.names = c(
      "Year",
      "Simulated Data - Player",
      "Simulated Data - MVP Index",
      "Historical Data - Player",
      "Historical Data - MVP Index"
    )
  ) %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed"), full_width = F) %>%
  add_header_above(c(" " = 1, "Simulated Data" = 2, "Historical Data" = 2))


```

# Results

Our results are summarized in @tbl-modelresults.

```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-mvpindex
#| fig-cap: "MVP index of of Historical and simulated MVPs"

merged_data <- bind_rows(
  merged_real_mvp %>% mutate(Source = "Historical MVPs"),
  mvp_table %>% mutate(Source = "Simulated MVPs")
)

# Create the faceted plot with lines connecting points
ggplot(merged_data, aes(x = Year, y = MVP_index, group = Source)) +
  geom_line(aes(color = Source), size = 1, alpha = 0.7) +  # Add lines connecting points
  geom_point(aes(color = Source), size = 3, alpha = 0.7) +  # Keep the points
  facet_wrap(~ Source, ncol = 2) +  # Facet by the Source column, side by side
  labs(
    title = "Scatter: Year vs. MVP Index",
    x = "Year",
    y = "MVP Index"
  ) +
  coord_cartesian(ylim = c(1.7, 2.8)) +  # Maintain the same y-axis range
  theme_minimal() +
  theme(
    legend.position = "none",  # Remove the legend since it's redundant with faceting
    strip.text = element_text(size = 12, face = "bold")
  )


```


```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-pts
#| fig-cap: "MVP PPG over Time"

# Add a source column to the datasets
mvp_table <- mvp_table %>%
  mutate(Source = "Simulated MVPs")

merged_real_mvp <- merged_real_mvp %>%
  mutate(Source = "Historical MVPs")

# Combine datasets
combined_data <- bind_rows(
  mvp_table %>% select(Year, PTS, TRB, AST, Source),
  merged_real_mvp %>% select(Year, PTS, TRB, AST, Source)
)

# Plot for PTS
pts_plot <- ggplot(combined_data, aes(x = Year, y = PTS, group = Source, color = Source)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_line(alpha = 0.7) +
  facet_wrap(~ Source) +
  labs(
    x = "Year",
    y = "PTS"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Plot for TRB
trb_plot <- ggplot(combined_data, aes(x = Year, y = TRB, group = Source, color = Source)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_line(alpha = 0.7) +
  facet_wrap(~ Source) +
  labs(
    x = "Year",
    y = "TRB"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Plot for AST
ast_plot <- ggplot(combined_data, aes(x = Year, y = AST, group = Source, color = Source)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_line(alpha = 0.7) +
  facet_wrap(~ Source) +
  labs(
    x = "Year",
    y = "AST"
  ) +
  theme_minimal() +
  theme(legend.position = "none")

# Display plots separately
print(pts_plot)




```


```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-reb
#| fig-cap: "MVP RPG over Time"

print(trb_plot)
```


```{r}
#| echo: false
#| warning: false
#| message: false
#| label: fig-ast
#| fig-cap: "MVP ASG over Time"

print(ast_plot)
```






# Discussion

## First discussion point {#sec-first-point}

If my paper were 10 pages, then should be be at least 2.5 pages. The discussion is a chance to show off what you know and what you learnt from all this.

## Second discussion point

Please don't use these as sub-heading labels - change them to be what your point actually is.

## Third discussion point

## Weaknesses and next steps

Weaknesses and next steps should also be included.

\newpage

\appendix

# Appendix {.unnumbered}

# Additional data details

# Model details {#sec-model-details}

```{r}
lm_summary <- summary(lm_model)

print(lm_summary)
```


## Posterior predictive check

## Diagnostics

```{r}
#| echo: false
#| eval: true
#| message: false
#| warning: false
#| label: fig-stanareyouokay
#| fig-cap: "Checking the convergence of the MCMC algorithm"
#| fig-subcap: ["Trace plot", "Rhat plot"]
#| layout-ncol: 2


```

\newpage

# References
